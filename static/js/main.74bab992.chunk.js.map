{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","username","email","className","src","alt","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","name","App","onSearchChange","event","setState","searchField","target","value","state","filtered","this","filter","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAceA,MAVf,YAAwC,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC5B,OACE,yBAAKC,UAAU,uCACb,yBAAKA,UAAU,WAAWC,IAAG,+BAA0BJ,GAAMK,IAAI,UACjE,yBAAKF,UAAU,oBAAoBF,GACnC,yBAAKE,UAAU,oBAAoBD,KCS1BI,MAbf,YAA6B,IAAVC,EAAS,EAATA,OAETC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMX,GAAIO,EAAOI,GAAGX,GAAIC,SAAUM,EAAOI,GAAGV,SAAUC,MAAOK,EAAOI,GAAGT,WAGlF,OACI,6BACKM,ICEEI,MAVf,YAAoC,IAAhBC,EAAe,EAAfA,aAGhB,OACI,yBAAMV,UAAU,uCACZ,2BAAOW,KAAK,SAASC,YAAY,YAAYC,SAAUH,MCVtDN,EAAS,CACpB,CACEP,GAAI,EACJiB,KAAM,gBACNhB,SAAU,OACVC,MAAO,qBAET,CACEF,GAAI,EACJiB,KAAM,eACNhB,SAAU,YACVC,MAAO,qBAET,CACEF,GAAI,EACJiB,KAAM,mBACNhB,SAAU,WACVC,MAAO,sBAET,CACEF,GAAI,EACJiB,KAAM,mBACNhB,SAAU,WACVC,MAAO,6BAET,CACEF,GAAI,EACJiB,KAAM,mBACNhB,SAAU,SACVC,MAAO,4BAET,CACEF,GAAI,EACJiB,KAAM,uBACNhB,SAAU,mBACVC,MAAO,2BAET,CACEF,GAAI,EACJiB,KAAM,kBACNhB,SAAU,eACVC,MAAO,0BAET,CACEF,GAAI,EACJiB,KAAM,2BACNhB,SAAU,gBACVC,MAAO,wBAET,CACEF,GAAI,EACJiB,KAAM,kBACNhB,SAAU,WACVC,MAAO,2BAET,CACEF,GAAI,GACJiB,KAAM,qBACNhB,SAAU,iBACVC,MAAO,2BCtBIgB,E,kDA5BX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,SAP3C,EAAKC,MAAQ,CACTlB,OAAQA,EACRe,YAAa,IAJP,E,qDAaJ,IAAD,OACCI,EAAWC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GACvC,OAAQA,EAAON,SAAS4B,oBAAoBC,SAAS,EAAKL,MAAMH,YAAYO,wBAG/E,OACI,yBAAK1B,UAAU,MACX,uCACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKR,iBAC9B,kBAAC,EAAD,CAAUZ,OAAQmB,S,GAxBhBK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.74bab992.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'tachyons';\n\nfunction Card({ id, username, email }) {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow'>\n      <img className='App-logo' src={`https://robohash.org/${id}`} alt='MyPic'></img>\n      <div className='big-light-red tc'>{username}</div>\n      <div className='big-light-red tc'>{email}</div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\r\nimport 'tachyons';\r\nimport Card from './Card';\r\n\r\n\r\nfunction CardList({robots}) {\r\n\r\n    const cardComponent = robots.map((user, i) => {\r\n        return <Card id={robots[i].id} username={robots[i].username} email={robots[i].email} />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nfunction SearchBox({searchChange}) {\r\n\r\n  \r\n    return (\r\n        <div  className='pa3 ba b--green bg-lightest-blue tc'>\r\n            <input type='search' placeholder='searchbox' onChange={searchChange}></input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React, { Component } from 'react';\r\nimport 'tachyons';\r\nimport CardList from './CardList.js';\r\nimport SearchBox from './SearchBox.js';\r\nimport { robots } from './robots';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: robots,\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField : event.target.value })\r\n        \r\n    }\r\n\r\n    render() {\r\n        const filtered = this.state.robots.filter(robots => {\r\n           return  robots.username.toLocaleLowerCase().includes(this.state.searchField.toLocaleLowerCase());\r\n        })\r\n\r\n        return (\r\n            <div className='tc'>\r\n                <h2 >My List</h2>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <CardList robots={filtered} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}